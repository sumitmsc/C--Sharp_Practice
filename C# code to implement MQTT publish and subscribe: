using System;
using System.Text;
using System.Threading.Tasks;
using MQTTnet;
using MQTTnet.Client;
using MQTTnet.Client.Options;
using MQTTnet.Client.Receiving;

class Program
{
    static async Task Main(string[] args)
    {
        var mqttFactory = new MqttFactory();

        // Set up the MQTT Client
        var mqttClient = mqttFactory.CreateMqttClient();
        var mqttOptions = new MqttClientOptionsBuilder()
            .WithClientId("Client1")
            .WithTcpServer("broker.hivemq.com", 1883) // Public broker for testing
            .WithCleanSession()
            .Build();

        // Connect the client to the broker
        mqttClient.UseConnectedHandler(e =>
        {
            Console.WriteLine("Connected to MQTT broker.");
        });

        mqttClient.UseDisconnectedHandler(e =>
        {
            Console.WriteLine("Disconnected from MQTT broker.");
        });

        mqttClient.UseApplicationMessageReceivedHandler(e =>
        {
            string topic = e.ApplicationMessage.Topic;
            string payload = Encoding.UTF8.GetString(e.ApplicationMessage.Payload);

            Console.WriteLine($"Message received on topic '{topic}': {payload}");
        });

        await mqttClient.ConnectAsync(mqttOptions);

        // Subscribe to a topic
        string topicToSubscribe = "test/topic";
        await mqttClient.SubscribeAsync(new MqttTopicFilterBuilder().WithTopic(topicToSubscribe).Build());
        Console.WriteLine($"Subscribed to topic: {topicToSubscribe}");

        // Publish a message to the topic
        string messageToPublish = "Hello, MQTT!";
        var message = new MqttApplicationMessageBuilder()
            .WithTopic(topicToSubscribe)
            .WithPayload(messageToPublish)
            .WithQualityOfServiceLevel(MQTTnet.Protocol.MqttQualityOfServiceLevel.AtLeastOnce)
            .Build();

        await mqttClient.PublishAsync(message);
        Console.WriteLine($"Message published: {messageToPublish}");

        // Wait to receive messages
        Console.WriteLine("Press any key to exit...");
        Console.ReadKey();

        // Disconnect from the broker
        await mqttClient.DisconnectAsync();
    }
}
